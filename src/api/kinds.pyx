# distutils: language = c++
# distutils: extra_compile_args = -std=c++11

from Kind cimport *

import sys

# map C++ kinds to python names
cdef kind_dict = {
    <int> INTERNAL_KIND: "InternalKind",
    <int> UNDEFINED_KIND: "UndefinedKind",
    <int> NULL_EXPR: "NullExpr",
    <int> UNINTERPRETED_CONSTANT: "UninterpretedConstant",
    <int> ABSTRACT_VALUE: "AbstractValue",
    # <int> BUILTIN: "Builtin",
    <int> FUNCTION: "Function",
    <int> APPLY: "Apply",
    <int> EQUAL: "Equal",
    <int> DISTINCT: "Distinct",
    <int> VARIABLE: "Variable",
    <int> BOUND_VARIABLE: "BoundVariable",
    # <int> SKOLEM: "Skolem",
    # <int> SEXPR: "Sexpr",
    <int> LAMBDA: "Lambda",
    <int> CHOICE: "Choice",
    <int> CHAIN: "Chain",
    <int> CHAIN_OP: "ChainOp",
    <int> CONST_BOOLEAN: "ConstBoolean",
    <int> NOT: "Not",
    <int> AND: "And",
    <int> IMPLIES: "Implies",
    <int> OR: "Or",
    <int> XOR: "Xor",
    <int> ITE: "Ite",
    <int> APPLY_UF: "ApplyUf",
    # <int> BOOLEAN_TERM_VARIABLE: "BooleanTermVariable",
    <int> CARDINALITY_CONSTRAINT: "CardinalityConstraint",
    # <int> COMBINED_CARDINALITY_CONSTRAINT: "CombinedCardinalityConstraint",
    # <int> PARTIAL_APPLY_UF: "PartialApplyUf",
    # <int> CARDINALITY_VALUE: " CardinalityValue",
    <int> HO_APPLY: "HoApply",
    <int> PLUS: "Plus",
    <int> MULT: "Mult",
    # <int> NONLINEAR_MULT: "NonlinearMult",
    <int> MINUS: "Minus",
    <int> UMINUS: "Uminus",
    <int> DIVISION: "Division",
    <int> DIVISION_TOTAL: "DivisionTotal",
    <int> INTS_DIVISION: "IntsDivision",
    <int> INTS_DIVISION_TOTAL: "IntsDivisionTotal",
    <int> INTS_MODULUS: "IntsModulus",
    <int> INTS_MODULUS_TOTAL: "IntsModulusTotal",
    <int> ABS: "Abs",
    <int> DIVISIBLE: "Divisible",
    <int> POW: "Pow",
    <int> EXPONENTIAL: "Exponential",
    <int> SINE: "Sine",
    <int> COSINE: "Cosine",
    <int> TANGENT: "Tangent",
    <int> COSECANT: "Cosecant",
    <int> SECANT: "Secant",
    <int> COTANGENT: "Cotangent",
    <int> ARCSINE: "Arcsine",
    <int> ARCCOSINE: "Arccosine",
    <int> ARCTANGENT: "Arctangent",
    <int> ARCCOSECANT: "Arccosecant",
    <int> ARCSECANT: "Arcsecant",
    <int> ARCCOTANGENT: "Arccotangent",
    <int> SQRT: "Sqrt",
    <int> DIVISIBLE_OP: "DivisibleOp",
    <int> CONST_RATIONAL: "ConstRational",
    <int> LT: "Lt",
    <int> LEQ: "Leq",
    <int> GT: "Gt",
    <int> GEQ: "Geq",
    <int> IS_INTEGER: "IsInteger",
    <int> TO_INTEGER: "ToInteger",
    <int> TO_REAL: "ToReal",
    <int> PI: "Pi",
    <int> CONST_BITVECTOR: "ConstBitvector",
    <int> BITVECTOR_CONCAT: "BVConcat",
    <int> BITVECTOR_AND: "BVAnd",
    <int> BITVECTOR_OR: "BVOr",
    <int> BITVECTOR_XOR: "BVXor",
    <int> BITVECTOR_NOT: "BVNot",
    <int> BITVECTOR_NAND: "BVNand",
    <int> BITVECTOR_NOR: "BVNor",
    <int> BITVECTOR_XNOR: "BVXnor",
    <int> BITVECTOR_COMP: "BVComp",
    <int> BITVECTOR_MULT: "BVMult",
    <int> BITVECTOR_PLUS: "BVPlus",
    <int> BITVECTOR_SUB: "BVSub",
    <int> BITVECTOR_NEG: "BVNeg",
    <int> BITVECTOR_UDIV: "BVUdiv",
    <int> BITVECTOR_UREM: "BVUrem",
    <int> BITVECTOR_SDIV: "BVSdiv",
    <int> BITVECTOR_SREM: "BVSrem",
    <int> BITVECTOR_SMOD: "BVSmod",
    <int> BITVECTOR_UDIV_TOTAL: "BVUdivTotal",
    <int> BITVECTOR_UREM_TOTAL: "BVUremTotal",
    <int> BITVECTOR_SHL: "BVShl",
    <int> BITVECTOR_LSHR: "BVLshr",
    <int> BITVECTOR_ASHR: "BVAshr",
    <int> BITVECTOR_ULT: "BVUlt",
    <int> BITVECTOR_ULE: "BVUle",
    <int> BITVECTOR_UGT: "BVUgt",
    <int> BITVECTOR_UGE: "BVUge",
    <int> BITVECTOR_SLT: "BVSlt",
    <int> BITVECTOR_SLE: "BVSle",
    <int> BITVECTOR_SGT: "BVSgt",
    <int> BITVECTOR_SGE: "BVSge",
    <int> BITVECTOR_ULTBV: "BVUltbv",
    <int> BITVECTOR_SLTBV: "BVSltbv",
    <int> BITVECTOR_ITE: "BVIte",
    <int> BITVECTOR_REDOR: "BVRedor",
    <int> BITVECTOR_REDAND: "BVRedand",
    # <int> BITVECTOR_EAGER_ATOM: "BVEagerAtom",
    # <int> BITVECTOR_ACKERMANIZE_UDIV: "BVAckermanizeUdiv",
    # <int> BITVECTOR_ACKERMANIZE_UREM: "BVAckermanizeUrem",
    # <int> BITVECTOR_BITOF_OP: "BVBitofOp",
    <int> BITVECTOR_EXTRACT_OP: "BVExtractOp",
    <int> BITVECTOR_REPEAT_OP: "BVRepeatOp",
    <int> BITVECTOR_ZERO_EXTEND_OP: "BVZeroExtendOp",
    <int> BITVECTOR_SIGN_EXTEND_OP: "BVSignExtendOp",
    <int> BITVECTOR_ROTATE_LEFT_OP: "BVRotateLeftOp",
    <int> BITVECTOR_ROTATE_RIGHT_OP: "BVRotateRightOp",
    # <int> BITVECTOR_BITOF: "BVBitof",
    <int> BITVECTOR_EXTRACT: "BVExtract",
    <int> BITVECTOR_REPEAT: "BVRepeat",
    <int> BITVECTOR_ZERO_EXTEND: "BVZeroExtend",
    <int> BITVECTOR_SIGN_EXTEND: "BVSignExtend",
    <int> BITVECTOR_ROTATE_LEFT: "BVRotateLeft",
    <int> BITVECTOR_ROTATE_RIGHT: "BVRotateRight",
    <int> INT_TO_BITVECTOR_OP: "IntToBitvectorOp",
    <int> INT_TO_BITVECTOR: "IntToBitvector",
    <int> BITVECTOR_TO_NAT: "BVToNat",
    <int> CONST_FLOATINGPOINT: "ConstFloatingpoint",
    <int> CONST_ROUNDINGMODE: "ConstRoundingmode",
    <int> FLOATINGPOINT_FP: "FloatingpointFp",
    <int> FLOATINGPOINT_EQ: "FloatingpointEq",
    <int> FLOATINGPOINT_ABS: "FloatingpointAbs",
    <int> FLOATINGPOINT_NEG: "FloatingpointNeg",
    <int> FLOATINGPOINT_PLUS: "FloatingpointPlus",
    <int> FLOATINGPOINT_SUB: "FloatingpointSub",
    <int> FLOATINGPOINT_MULT: "FloatingpointMult",
    <int> FLOATINGPOINT_DIV: "FloatingpointDiv",
    <int> FLOATINGPOINT_FMA: "FloatingpointFma",
    <int> FLOATINGPOINT_SQRT: "FloatingpointSqrt",
    <int> FLOATINGPOINT_REM: "FloatingpointRem",
    <int> FLOATINGPOINT_RTI: "FloatingpointRti",
    <int> FLOATINGPOINT_MIN: "FloatingpointMin",
    <int> FLOATINGPOINT_MAX: "FloatingpointMax",
    # <int> FLOATINGPOINT_MIN_TOTAL: "FloatingpointMinTotal",
    # <int> FLOATINGPOINT_MAX_TOTAL: "FloatingpointMaxTotal",
    <int> FLOATINGPOINT_LEQ: "FloatingpointLeq",
    <int> FLOATINGPOINT_LT: "FloatingpointLt",
    <int> FLOATINGPOINT_GEQ: "FloatingpointGeq",
    <int> FLOATINGPOINT_GT: "FloatingpointGt",
    <int> FLOATINGPOINT_ISN: "FloatingpointIsN",
    <int> FLOATINGPOINT_ISSN: "FloatingpointIsSn",
    <int> FLOATINGPOINT_ISZ: "FloatingpointIsZ",
    <int> FLOATINGPOINT_ISINF: "FloatingpointIsInf",
    <int> FLOATINGPOINT_ISNAN: "FloatingpointIsNan",
    <int> FLOATINGPOINT_ISNEG: "FloatingpointIsNeg",
    <int> FLOATINGPOINT_ISPOS: "FloatingpointIsPos",
    <int> FLOATINGPOINT_TO_FP_IEEE_BITVECTOR_OP: "FloatingpointToFpIeeeBitvectorOp",
    <int> FLOATINGPOINT_TO_FP_IEEE_BITVECTOR: "FloatingpointToFpIeeeBitvector",
    <int> FLOATINGPOINT_TO_FP_FLOATINGPOINT_OP: "FloatingpointToFpFloatingpointOp",
    <int> FLOATINGPOINT_TO_FP_FLOATINGPOINT: "FloatingpointToFpFloatingpoint",
    <int> FLOATINGPOINT_TO_FP_REAL_OP: "FloatingpointToFpRealOp",
    <int> FLOATINGPOINT_TO_FP_REAL: "FloatingpointToFpReal",
    <int> FLOATINGPOINT_TO_FP_SIGNED_BITVECTOR_OP: "FloatingpointToFpSignedBitvectorOp",
    <int> FLOATINGPOINT_TO_FP_SIGNED_BITVECTOR: "FloatingpointToFpSignedBitvector",
    <int> FLOATINGPOINT_TO_FP_UNSIGNED_BITVECTOR_OP: "FloatingpointToFpUnsignedBitvectorOp",
    <int> FLOATINGPOINT_TO_FP_UNSIGNED_BITVECTOR: "FloatingpointToFpUnsignedBitvector",
    <int> FLOATINGPOINT_TO_FP_GENERIC_OP: "FloatingpointToFpGenericOp",
    <int> FLOATINGPOINT_TO_FP_GENERIC: "FloatingpointToFpGeneric",
    <int> FLOATINGPOINT_TO_UBV_OP: "FloatingpointToUbvOp",
    <int> FLOATINGPOINT_TO_UBV: "FloatingpointToUbv",
    <int> FLOATINGPOINT_TO_UBV_TOTAL_OP: "FloatingpointToUbvTotalOp",
    <int> FLOATINGPOINT_TO_UBV_TOTAL: "FloatingpointToUbvTotal",
    <int> FLOATINGPOINT_TO_SBV_OP: "FloatingpointToSbvOp",
    <int> FLOATINGPOINT_TO_SBV: "FloatingpointToSbv",
    <int> FLOATINGPOINT_TO_SBV_TOTAL_OP: "FloatingpointToSbvTotalOp",
    <int> FLOATINGPOINT_TO_SBV_TOTAL: "FloatingpointToSbvTotal",
    <int> FLOATINGPOINT_TO_REAL: "FloatingpointToReal",
    <int> FLOATINGPOINT_TO_REAL_TOTAL: "FloatingpointToRealTotal",
    <int> SELECT: "Select",
    <int> STORE: "Store",
    <int> STORE_ALL: "StoreAll",
    # <int> ARR_TABLE_FUN: "ArrTable_fun",
    # <int> ARRAY_LAMBDA: "ArrayLambda",
    # <int> PARTIAL_SELECT_0: "PartialSelect0",
    # <int> PARTIAL_SELECT_1: "PartialSelect1",
    <int> APPLY_SELECTOR: "ApplySelector",
    <int> APPLY_CONSTRUCTOR: "ApplyConstructor",
    <int> APPLY_SELECTOR_TOTAL: "ApplySelector_total",
    <int> APPLY_TESTER: "ApplyTester",
    # <int> PARAMETRIC_DATATYPE: "ParametricDatatype",
    # <int> APPLY_TYPE_ASCRIPTION: "ApplyTypeAscription",
    <int> TUPLE_UPDATE_OP: "TupleUpdateOp",
    <int> TUPLE_UPDATE: "TupleUpdate",
    <int> RECORD_UPDATE_OP: "RecordUpdateOp",
    <int> RECORD_UPDATE: "RecordUpdate",
    # <int> DT_SIZE: "DtSize",
    # <int> DT_HEIGHT_BOUND: "DtHeightBound",
    # <int> DT_SIZE_BOUND: "DtSizeBound",
    # <int> DT_SYGUS_BOUND: "DtSygusBound",
    # <int> DT_SYGUS_TERM_ORDER: "DtSygusTermOrder",
    # <int> DT_SYGUS_IS_CONST: "DtSygusIsConst",
    <int> SEP_NIL: "SepNil",
    <int> SEP_EMP: "SepEmp",
    <int> SEP_PTO: "SepPto",
    <int> SEP_STAR: "SepStar",
    <int> SEP_WAND: "SepWand",
    # <int> SEP_LABEL: "SepLabel",
    <int> EMPTYSET: "Emptyset",
    <int> UNION: "Union",
    <int> INTERSECTION: "Intersection",
    <int> SETMINUS: "Setminus",
    <int> SUBSET: "Subset",
    <int> MEMBER: "Member",
    <int> SINGLETON: "Singleton",
    <int> INSERT: "Insert",
    <int> CARD: "Card",
    <int> COMPLEMENT: "Complement",
    <int> UNIVERSE_SET: "UniverseSet",
    <int> JOIN: "Join",
    <int> PRODUCT: "Product",
    <int> TRANSPOSE: "Transpose",
    <int> TCLOSURE: "Tclosure",
    <int> JOIN_IMAGE: "JoinImage",
    <int> IDEN: "Iden",
    <int> STRING_CONCAT: "StringConcat",
    <int> STRING_IN_REGEXP: "StringIn_regexp",
    <int> STRING_LENGTH: "StringLength",
    <int> STRING_SUBSTR: "StringSubstr",
    <int> STRING_CHARAT: "StringCharat",
    <int> STRING_STRCTN: "StringStrctn",
    <int> STRING_STRIDOF: "StringStridof",
    <int> STRING_STRREPL: "StringStrrepl",
    <int> STRING_PREFIX: "StringPrefix",
    <int> STRING_SUFFIX: "StringSuffix",
    <int> STRING_ITOS: "StringItos",
    <int> STRING_STOI: "StringStoi",
    <int> CONST_STRING: "ConstString",
    <int> STRING_TO_REGEXP: "StringTo_regexp",
    <int> REGEXP_CONCAT: "RegexpConcat",
    <int> REGEXP_UNION: "RegexpUnion",
    <int> REGEXP_INTER: "RegexpInter",
    <int> REGEXP_STAR: "RegexpStar",
    <int> REGEXP_PLUS: "RegexpPlus",
    <int> REGEXP_OPT: "RegexpOpt",
    <int> REGEXP_RANGE: "RegexpRange",
    <int> REGEXP_LOOP: "RegexpLoop",
    <int> REGEXP_EMPTY: "RegexpEmpty",
    <int> REGEXP_SIGMA: "RegexpSigma",
    # <int> REGEXP_RV: "RegexpRv",
    <int> FORALL: "Forall",
    <int> EXISTS: "Exists",
    # <int> INST_CONSTANT: "InstConstant",
    # <int> INST_PATTERN: "InstPattern",
    # <int> BOUND_VAR_LIST: "BoundVar_list",
    # <int> INST_NO_PATTERN: "InstNo_pattern",
    # <int> INST_ATTRIBUTE: "InstAttribute",
    # <int> INST_PATTERN_LIST: "InstPattern_list",
    # <int> INST_CLOSURE: "InstClosure",
    # <int> REWRITE_RULE: "RewriteRule",
    # <int> RR_REWRITE: "RrRewrite",
    # <int> RR_REDUCTION: "RrReduction",
    # <int> RR_DEDUCTION: "RrDeduction",
    # <int> ARRAY_TYPE: "ArrayType",
    # <int> ASCRIPTION_TYPE: "AscriptionType",
    # <int> CONSTRUCTOR_TYPE: "ConstructorType",
    # <int> DATATYPE_TYPE: "DatatypeType",
    # <int> SELECTOR_TYPE: "SelectorType",
    # <int> SET_TYPE: "SetType",
    # <int> SORT_TAG: "SortTag",
    # <int> SORT_TYPE: "SortType",
    # <int> TESTER_TYPE: "TesterType",
    # <int> TYPE_CONSTANT: "TypeConstant",
    # <int> FUNCTION_TYPE: "FunctionType",
    # <int> SEXPR_TYPE: "SexprType",
    # <int> BITVECTOR_TYPE: "BVType",
    # <int> FLOATINGPOINT_TYPE: "FloatingpointType"
}

cdef class kind:
#    cdef Kind k
#    cdef str name
    def __cinit__(self, int val):
        self.k = <Kind> val
        self.name = kind_dict[val]

    def __str__(self):
        return self.name

    def __repr__(self):
        return self.name

# add all kinds to this module
mod_ref = sys.modules[__name__]
for kind_int, name in kind_dict.items():
    new_kind = kind(kind_int)

    if name in dir(mod_ref):
        raise RuntimeError("Redefinition of Python kind %s."%name)

    setattr(mod_ref, name, new_kind)

del mod_ref
del new_kind
del kind_int
del name
