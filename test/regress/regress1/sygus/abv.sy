; EXPECT: unsat
; COMMAND-LINE: --sygus-out=status
(set-logic ABV)

(define-sort AddrSort () (BitVec 32))
(define-sort ValSort () (BitVec 8))
(define-sort MemSort () (Array AddrSort ValSort))

; Write the value y to index x
(define-fun WriteArr 
	; Args
	((x AddrSort) (y ValSort) (arrIn MemSort)) 
	
	; Return value
	MemSort
	
	; Function Body
	(store arrIn x y)
)

; Read from index x
(define-fun ReadArr 
	; Args
	((x AddrSort) (arrIn MemSort)) 
	
	; Return value
	ValSort
	
	; Function Body
	(select arrIn x)
)

(define-fun letf ((m MemSort) (v1 AddrSort) (v2 AddrSort)) ValSort
  (bvadd 
    (ReadArr v1 m) 
    (ReadArr v2 m)))

(synth-fun f 
	; Args
	((x0 ValSort) (x1 ValSort) (idx0 AddrSort) (idx1 AddrSort) (mem MemSort))
	
	; Return value
	ValSort
    
    	; Grammar
    	(
	(StartArray MemSort (
		(WriteArr (Variable AddrSort) (Variable ValSort) StartArray)
		(WriteArr (Variable AddrSort) (Variable ValSort) mem)))

	(Start ValSort (
		(letf StartArray (Variable AddrSort) (Variable AddrSort))))
))

(declare-var a (BitVec 8))
(declare-var b (BitVec 8))
(declare-var c (BitVec 32))
(declare-var d (BitVec 32))
(declare-var e (Array (BitVec 32) (BitVec 8)))
(constraint (=> (not (= c d)) (= (bvadd a b) (f a b c d e))))
(check-synth)
